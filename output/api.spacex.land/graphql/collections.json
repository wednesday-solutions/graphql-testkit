{"info":{"_postman_id":"4c04c820-a911-4a17-a2de-653b8c480677","name":"api.spacex.land/graphql","schema":"https://schema.getpostman.com/json/collection/v2.1.0/collection.json"},"item":[{"name":"query","item":[{"name":"query users","event":[{"listen":"test","script":{"exec":["pm.test(\"errors is undefined\", function() {","    const response = JSON.parse(responseBody);","    pm.expect(response.errors).to.be.undefined","});"],"type":"text/javascript"}}],"request":{"method":"POST","body":{"mode":"graphql","graphql":{"query":"query Users(\n  $usersDistinct_on: [users_select_column!]\n  $usersLimit: Int\n  $usersOffset: Int\n  $usersOrder_by: [users_order_by!]\n  $usersWhere: users_bool_exp\n) {\n  users(\n    distinct_on: $usersDistinct_on\n    limit: $usersLimit\n    offset: $usersOffset\n    order_by: $usersOrder_by\n    where: $usersWhere\n  ) {\n    id\n    name\n    rocket\n    timestamp\n    twitter\n  }\n}\n","variables":"{\n  \"usersDistinct_on\": null,\n  \"usersLimit\": null,\n  \"usersOffset\": null,\n  \"usersOrder_by\": null,\n  \"usersWhere\": null\n}\n"}},"url":{"raw":"https://api.spacex.land/graphql","host":["https://api.spacex.land/graphql"]}},"response":[]},{"name":"query users_aggregate","event":[{"listen":"test","script":{"exec":["pm.test(\"errors is undefined\", function() {","    const response = JSON.parse(responseBody);","    pm.expect(response.errors).to.be.undefined","});"],"type":"text/javascript"}}],"request":{"method":"POST","body":{"mode":"graphql","graphql":{"query":"query Users_aggregate(\n  $users_aggregateDistinct_on: [users_select_column!]\n  $users_aggregateLimit: Int\n  $users_aggregateOffset: Int\n  $users_aggregateOrder_by: [users_order_by!]\n  $users_aggregateWhere: users_bool_exp\n) {\n  users_aggregate(\n    distinct_on: $users_aggregateDistinct_on\n    limit: $users_aggregateLimit\n    offset: $users_aggregateOffset\n    order_by: $users_aggregateOrder_by\n    where: $users_aggregateWhere\n  ) {\n    aggregate {\n      count\n      max {\n        name\n        rocket\n        timestamp\n        twitter\n      }\n      min {\n        name\n        rocket\n        timestamp\n        twitter\n      }\n    }\n    nodes {\n      id\n      name\n      rocket\n      timestamp\n      twitter\n    }\n  }\n}\n","variables":"{\n  \"users_aggregateDistinct_on\": null,\n  \"users_aggregateLimit\": null,\n  \"users_aggregateOffset\": null,\n  \"users_aggregateOrder_by\": null,\n  \"users_aggregateWhere\": null\n}\n"}},"url":{"raw":"https://api.spacex.land/graphql","host":["https://api.spacex.land/graphql"]}},"response":[]},{"name":"query users_by_pk","event":[{"listen":"test","script":{"exec":["pm.test(\"errors is undefined\", function() {","    const response = JSON.parse(responseBody);","    pm.expect(response.errors).to.be.undefined","});"],"type":"text/javascript"}}],"request":{"method":"POST","body":{"mode":"graphql","graphql":{"query":"query Users_by_pk($users_by_pkId: uuid!) {\n  users_by_pk(id: $users_by_pkId) {\n    id\n    name\n    rocket\n    timestamp\n    twitter\n  }\n}\n","variables":"{\n  \"users_by_pkId\": null\n}\n"}},"url":{"raw":"https://api.spacex.land/graphql","host":["https://api.spacex.land/graphql"]}},"response":[]},{"name":"query capsules","event":[{"listen":"test","script":{"exec":["pm.test(\"errors is undefined\", function() {","    const response = JSON.parse(responseBody);","    pm.expect(response.errors).to.be.undefined","});"],"type":"text/javascript"}}],"request":{"method":"POST","body":{"mode":"graphql","graphql":{"query":"query Capsules(\n  $capsulesFind: CapsulesFind\n  $capsulesLimit: Int\n  $capsulesOffset: Int\n  $capsulesOrder: String\n  $capsulesSort: String\n) {\n  capsules(\n    find: $capsulesFind\n    limit: $capsulesLimit\n    offset: $capsulesOffset\n    order: $capsulesOrder\n    sort: $capsulesSort\n  ) {\n    id\n    landings\n    missions {\n      flight\n      name\n    }\n    original_launch\n    reuse_count\n    status\n    type\n    dragon {\n      active\n      crew_capacity\n      description\n      diameter {\n        feet\n        meters\n      }\n      dry_mass_kg\n      dry_mass_lb\n      first_flight\n      heat_shield {\n        dev_partner\n        material\n        size_meters\n        temp_degrees\n      }\n      height_w_trunk {\n        feet\n        meters\n      }\n      id\n      launch_payload_mass {\n        kg\n        lb\n      }\n      launch_payload_vol {\n        cubic_feet\n        cubic_meters\n      }\n      name\n      orbit_duration_yr\n      pressurized_capsule {\n        payload_volume {\n          cubic_feet\n          cubic_meters\n        }\n      }\n      return_payload_mass {\n        kg\n        lb\n      }\n      return_payload_vol {\n        cubic_feet\n        cubic_meters\n      }\n      sidewall_angle_deg\n      thrusters {\n        amount\n        fuel_1\n        fuel_2\n        pods\n        thrust {\n          kN\n          lbf\n        }\n        type\n      }\n      trunk {\n        cargo {\n          solar_array\n          unpressurized_cargo\n        }\n        trunk_volume {\n          cubic_feet\n          cubic_meters\n        }\n      }\n      type\n      wikipedia\n    }\n  }\n}\n","variables":"{\n  \"capsulesFind\": null,\n  \"capsulesLimit\": null,\n  \"capsulesOffset\": null,\n  \"capsulesOrder\": null,\n  \"capsulesSort\": null\n}\n"}},"url":{"raw":"https://api.spacex.land/graphql","host":["https://api.spacex.land/graphql"]}},"response":[]},{"name":"query capsulesPast","event":[{"listen":"test","script":{"exec":["pm.test(\"errors is undefined\", function() {","    const response = JSON.parse(responseBody);","    pm.expect(response.errors).to.be.undefined","});"],"type":"text/javascript"}}],"request":{"method":"POST","body":{"mode":"graphql","graphql":{"query":"query Capsulespast(\n  $capsulesPastFind: CapsulesFind\n  $capsulesPastLimit: Int\n  $capsulesPastOffset: Int\n  $capsulesPastOrder: String\n  $capsulesPastSort: String\n) {\n  capsulesPast(\n    find: $capsulesPastFind\n    limit: $capsulesPastLimit\n    offset: $capsulesPastOffset\n    order: $capsulesPastOrder\n    sort: $capsulesPastSort\n  ) {\n    id\n    landings\n    missions {\n      flight\n      name\n    }\n    original_launch\n    reuse_count\n    status\n    type\n    dragon {\n      active\n      crew_capacity\n      description\n      diameter {\n        feet\n        meters\n      }\n      dry_mass_kg\n      dry_mass_lb\n      first_flight\n      heat_shield {\n        dev_partner\n        material\n        size_meters\n        temp_degrees\n      }\n      height_w_trunk {\n        feet\n        meters\n      }\n      id\n      launch_payload_mass {\n        kg\n        lb\n      }\n      launch_payload_vol {\n        cubic_feet\n        cubic_meters\n      }\n      name\n      orbit_duration_yr\n      pressurized_capsule {\n        payload_volume {\n          cubic_feet\n          cubic_meters\n        }\n      }\n      return_payload_mass {\n        kg\n        lb\n      }\n      return_payload_vol {\n        cubic_feet\n        cubic_meters\n      }\n      sidewall_angle_deg\n      thrusters {\n        amount\n        fuel_1\n        fuel_2\n        pods\n        thrust {\n          kN\n          lbf\n        }\n        type\n      }\n      trunk {\n        cargo {\n          solar_array\n          unpressurized_cargo\n        }\n        trunk_volume {\n          cubic_feet\n          cubic_meters\n        }\n      }\n      type\n      wikipedia\n    }\n  }\n}\n","variables":"{\n  \"capsulesPastFind\": null,\n  \"capsulesPastLimit\": null,\n  \"capsulesPastOffset\": null,\n  \"capsulesPastOrder\": null,\n  \"capsulesPastSort\": null\n}\n"}},"url":{"raw":"https://api.spacex.land/graphql","host":["https://api.spacex.land/graphql"]}},"response":[]},{"name":"query capsulesUpcoming","event":[{"listen":"test","script":{"exec":["pm.test(\"errors is undefined\", function() {","    const response = JSON.parse(responseBody);","    pm.expect(response.errors).to.be.undefined","});"],"type":"text/javascript"}}],"request":{"method":"POST","body":{"mode":"graphql","graphql":{"query":"query Capsulesupcoming(\n  $capsulesUpcomingFind: CapsulesFind\n  $capsulesUpcomingLimit: Int\n  $capsulesUpcomingOffset: Int\n  $capsulesUpcomingOrder: String\n  $capsulesUpcomingSort: String\n) {\n  capsulesUpcoming(\n    find: $capsulesUpcomingFind\n    limit: $capsulesUpcomingLimit\n    offset: $capsulesUpcomingOffset\n    order: $capsulesUpcomingOrder\n    sort: $capsulesUpcomingSort\n  ) {\n    id\n    landings\n    missions {\n      flight\n      name\n    }\n    original_launch\n    reuse_count\n    status\n    type\n    dragon {\n      active\n      crew_capacity\n      description\n      diameter {\n        feet\n        meters\n      }\n      dry_mass_kg\n      dry_mass_lb\n      first_flight\n      heat_shield {\n        dev_partner\n        material\n        size_meters\n        temp_degrees\n      }\n      height_w_trunk {\n        feet\n        meters\n      }\n      id\n      launch_payload_mass {\n        kg\n        lb\n      }\n      launch_payload_vol {\n        cubic_feet\n        cubic_meters\n      }\n      name\n      orbit_duration_yr\n      pressurized_capsule {\n        payload_volume {\n          cubic_feet\n          cubic_meters\n        }\n      }\n      return_payload_mass {\n        kg\n        lb\n      }\n      return_payload_vol {\n        cubic_feet\n        cubic_meters\n      }\n      sidewall_angle_deg\n      thrusters {\n        amount\n        fuel_1\n        fuel_2\n        pods\n        thrust {\n          kN\n          lbf\n        }\n        type\n      }\n      trunk {\n        cargo {\n          solar_array\n          unpressurized_cargo\n        }\n        trunk_volume {\n          cubic_feet\n          cubic_meters\n        }\n      }\n      type\n      wikipedia\n    }\n  }\n}\n","variables":"{\n  \"capsulesUpcomingFind\": null,\n  \"capsulesUpcomingLimit\": null,\n  \"capsulesUpcomingOffset\": null,\n  \"capsulesUpcomingOrder\": null,\n  \"capsulesUpcomingSort\": null\n}\n"}},"url":{"raw":"https://api.spacex.land/graphql","host":["https://api.spacex.land/graphql"]}},"response":[]},{"name":"query capsule","event":[{"listen":"test","script":{"exec":["pm.test(\"errors is undefined\", function() {","    const response = JSON.parse(responseBody);","    pm.expect(response.errors).to.be.undefined","});"],"type":"text/javascript"}}],"request":{"method":"POST","body":{"mode":"graphql","graphql":{"query":"query Capsule($capsuleId: ID!) {\n  capsule(id: $capsuleId) {\n    id\n    landings\n    missions {\n      flight\n      name\n    }\n    original_launch\n    reuse_count\n    status\n    type\n    dragon {\n      active\n      crew_capacity\n      description\n      diameter {\n        feet\n        meters\n      }\n      dry_mass_kg\n      dry_mass_lb\n      first_flight\n      heat_shield {\n        dev_partner\n        material\n        size_meters\n        temp_degrees\n      }\n      height_w_trunk {\n        feet\n        meters\n      }\n      id\n      launch_payload_mass {\n        kg\n        lb\n      }\n      launch_payload_vol {\n        cubic_feet\n        cubic_meters\n      }\n      name\n      orbit_duration_yr\n      pressurized_capsule {\n        payload_volume {\n          cubic_feet\n          cubic_meters\n        }\n      }\n      return_payload_mass {\n        kg\n        lb\n      }\n      return_payload_vol {\n        cubic_feet\n        cubic_meters\n      }\n      sidewall_angle_deg\n      thrusters {\n        amount\n        fuel_1\n        fuel_2\n        pods\n        thrust {\n          kN\n          lbf\n        }\n        type\n      }\n      trunk {\n        cargo {\n          solar_array\n          unpressurized_cargo\n        }\n        trunk_volume {\n          cubic_feet\n          cubic_meters\n        }\n      }\n      type\n      wikipedia\n    }\n  }\n}\n","variables":"{\n  \"capsuleId\": null\n}\n"}},"url":{"raw":"https://api.spacex.land/graphql","host":["https://api.spacex.land/graphql"]}},"response":[]},{"name":"query company","event":[{"listen":"test","script":{"exec":["pm.test(\"errors is undefined\", function() {","    const response = JSON.parse(responseBody);","    pm.expect(response.errors).to.be.undefined","});"],"type":"text/javascript"}}],"request":{"method":"POST","body":{"mode":"graphql","graphql":{"query":"query Company {\n  company {\n    ceo\n    coo\n    cto_propulsion\n    cto\n    employees\n    founded\n    founder\n    headquarters {\n      address\n      city\n      state\n    }\n    launch_sites\n    links {\n      elon_twitter\n      flickr\n      twitter\n      website\n    }\n    name\n    summary\n    test_sites\n    valuation\n    vehicles\n  }\n}\n","variables":"{}\n"}},"url":{"raw":"https://api.spacex.land/graphql","host":["https://api.spacex.land/graphql"]}},"response":[]},{"name":"query cores","event":[{"listen":"test","script":{"exec":["pm.test(\"errors is undefined\", function() {","    const response = JSON.parse(responseBody);","    pm.expect(response.errors).to.be.undefined","});"],"type":"text/javascript"}}],"request":{"method":"POST","body":{"mode":"graphql","graphql":{"query":"query Cores(\n  $coresFind: CoresFind\n  $coresLimit: Int\n  $coresOffset: Int\n  $coresOrder: String\n  $coresSort: String\n) {\n  cores(\n    find: $coresFind\n    limit: $coresLimit\n    offset: $coresOffset\n    order: $coresOrder\n    sort: $coresSort\n  ) {\n    asds_attempts\n    asds_landings\n    block\n    id\n    missions {\n      flight\n      name\n    }\n    original_launch\n    reuse_count\n    rtls_attempts\n    rtls_landings\n    status\n    water_landing\n  }\n}\n","variables":"{\n  \"coresFind\": null,\n  \"coresLimit\": null,\n  \"coresOffset\": null,\n  \"coresOrder\": null,\n  \"coresSort\": null\n}\n"}},"url":{"raw":"https://api.spacex.land/graphql","host":["https://api.spacex.land/graphql"]}},"response":[]},{"name":"query coresPast","event":[{"listen":"test","script":{"exec":["pm.test(\"errors is undefined\", function() {","    const response = JSON.parse(responseBody);","    pm.expect(response.errors).to.be.undefined","});"],"type":"text/javascript"}}],"request":{"method":"POST","body":{"mode":"graphql","graphql":{"query":"query Corespast(\n  $coresPastFind: CoresFind\n  $coresPastLimit: Int\n  $coresPastOffset: Int\n  $coresPastOrder: String\n  $coresPastSort: String\n) {\n  coresPast(\n    find: $coresPastFind\n    limit: $coresPastLimit\n    offset: $coresPastOffset\n    order: $coresPastOrder\n    sort: $coresPastSort\n  ) {\n    asds_attempts\n    asds_landings\n    block\n    id\n    missions {\n      flight\n      name\n    }\n    original_launch\n    reuse_count\n    rtls_attempts\n    rtls_landings\n    status\n    water_landing\n  }\n}\n","variables":"{\n  \"coresPastFind\": null,\n  \"coresPastLimit\": null,\n  \"coresPastOffset\": null,\n  \"coresPastOrder\": null,\n  \"coresPastSort\": null\n}\n"}},"url":{"raw":"https://api.spacex.land/graphql","host":["https://api.spacex.land/graphql"]}},"response":[]},{"name":"query coresUpcoming","event":[{"listen":"test","script":{"exec":["pm.test(\"errors is undefined\", function() {","    const response = JSON.parse(responseBody);","    pm.expect(response.errors).to.be.undefined","});"],"type":"text/javascript"}}],"request":{"method":"POST","body":{"mode":"graphql","graphql":{"query":"query Coresupcoming(\n  $coresUpcomingFind: CoresFind\n  $coresUpcomingLimit: Int\n  $coresUpcomingOffset: Int\n  $coresUpcomingOrder: String\n  $coresUpcomingSort: String\n) {\n  coresUpcoming(\n    find: $coresUpcomingFind\n    limit: $coresUpcomingLimit\n    offset: $coresUpcomingOffset\n    order: $coresUpcomingOrder\n    sort: $coresUpcomingSort\n  ) {\n    asds_attempts\n    asds_landings\n    block\n    id\n    missions {\n      flight\n      name\n    }\n    original_launch\n    reuse_count\n    rtls_attempts\n    rtls_landings\n    status\n    water_landing\n  }\n}\n","variables":"{\n  \"coresUpcomingFind\": null,\n  \"coresUpcomingLimit\": null,\n  \"coresUpcomingOffset\": null,\n  \"coresUpcomingOrder\": null,\n  \"coresUpcomingSort\": null\n}\n"}},"url":{"raw":"https://api.spacex.land/graphql","host":["https://api.spacex.land/graphql"]}},"response":[]},{"name":"query core","event":[{"listen":"test","script":{"exec":["pm.test(\"errors is undefined\", function() {","    const response = JSON.parse(responseBody);","    pm.expect(response.errors).to.be.undefined","});"],"type":"text/javascript"}}],"request":{"method":"POST","body":{"mode":"graphql","graphql":{"query":"query Core($coreId: ID!) {\n  core(id: $coreId) {\n    asds_attempts\n    asds_landings\n    block\n    id\n    missions {\n      flight\n      name\n    }\n    original_launch\n    reuse_count\n    rtls_attempts\n    rtls_landings\n    status\n    water_landing\n  }\n}\n","variables":"{\n  \"coreId\": null\n}\n"}},"url":{"raw":"https://api.spacex.land/graphql","host":["https://api.spacex.land/graphql"]}},"response":[]},{"name":"query dragons","event":[{"listen":"test","script":{"exec":["pm.test(\"errors is undefined\", function() {","    const response = JSON.parse(responseBody);","    pm.expect(response.errors).to.be.undefined","});"],"type":"text/javascript"}}],"request":{"method":"POST","body":{"mode":"graphql","graphql":{"query":"query Dragons($dragonsLimit: Int, $dragonsOffset: Int) {\n  dragons(limit: $dragonsLimit, offset: $dragonsOffset) {\n    active\n    crew_capacity\n    description\n    diameter {\n      feet\n      meters\n    }\n    dry_mass_kg\n    dry_mass_lb\n    first_flight\n    heat_shield {\n      dev_partner\n      material\n      size_meters\n      temp_degrees\n    }\n    height_w_trunk {\n      feet\n      meters\n    }\n    id\n    launch_payload_mass {\n      kg\n      lb\n    }\n    launch_payload_vol {\n      cubic_feet\n      cubic_meters\n    }\n    name\n    orbit_duration_yr\n    pressurized_capsule {\n      payload_volume {\n        cubic_feet\n        cubic_meters\n      }\n    }\n    return_payload_mass {\n      kg\n      lb\n    }\n    return_payload_vol {\n      cubic_feet\n      cubic_meters\n    }\n    sidewall_angle_deg\n    thrusters {\n      amount\n      fuel_1\n      fuel_2\n      pods\n      thrust {\n        kN\n        lbf\n      }\n      type\n    }\n    trunk {\n      cargo {\n        solar_array\n        unpressurized_cargo\n      }\n      trunk_volume {\n        cubic_feet\n        cubic_meters\n      }\n    }\n    type\n    wikipedia\n  }\n}\n","variables":"{\n  \"dragonsLimit\": null,\n  \"dragonsOffset\": null\n}\n"}},"url":{"raw":"https://api.spacex.land/graphql","host":["https://api.spacex.land/graphql"]}},"response":[]},{"name":"query dragon","event":[{"listen":"test","script":{"exec":["pm.test(\"errors is undefined\", function() {","    const response = JSON.parse(responseBody);","    pm.expect(response.errors).to.be.undefined","});"],"type":"text/javascript"}}],"request":{"method":"POST","body":{"mode":"graphql","graphql":{"query":"query Dragon($dragonId: ID!) {\n  dragon(id: $dragonId) {\n    active\n    crew_capacity\n    description\n    diameter {\n      feet\n      meters\n    }\n    dry_mass_kg\n    dry_mass_lb\n    first_flight\n    heat_shield {\n      dev_partner\n      material\n      size_meters\n      temp_degrees\n    }\n    height_w_trunk {\n      feet\n      meters\n    }\n    id\n    launch_payload_mass {\n      kg\n      lb\n    }\n    launch_payload_vol {\n      cubic_feet\n      cubic_meters\n    }\n    name\n    orbit_duration_yr\n    pressurized_capsule {\n      payload_volume {\n        cubic_feet\n        cubic_meters\n      }\n    }\n    return_payload_mass {\n      kg\n      lb\n    }\n    return_payload_vol {\n      cubic_feet\n      cubic_meters\n    }\n    sidewall_angle_deg\n    thrusters {\n      amount\n      fuel_1\n      fuel_2\n      pods\n      thrust {\n        kN\n        lbf\n      }\n      type\n    }\n    trunk {\n      cargo {\n        solar_array\n        unpressurized_cargo\n      }\n      trunk_volume {\n        cubic_feet\n        cubic_meters\n      }\n    }\n    type\n    wikipedia\n  }\n}\n","variables":"{\n  \"dragonId\": null\n}\n"}},"url":{"raw":"https://api.spacex.land/graphql","host":["https://api.spacex.land/graphql"]}},"response":[]},{"name":"query histories","event":[{"listen":"test","script":{"exec":["pm.test(\"errors is undefined\", function() {","    const response = JSON.parse(responseBody);","    pm.expect(response.errors).to.be.undefined","});"],"type":"text/javascript"}}],"request":{"method":"POST","body":{"mode":"graphql","graphql":{"query":"query Histories(\n  $historiesFind: HistoryFind\n  $historiesLimit: Int\n  $historiesOffset: Int\n  $historiesOrder: String\n  $historiesSort: String\n) {\n  histories(\n    find: $historiesFind\n    limit: $historiesLimit\n    offset: $historiesOffset\n    order: $historiesOrder\n    sort: $historiesSort\n  ) {\n    details\n    event_date_unix\n    event_date_utc\n    id\n    links {\n      article\n      reddit\n      wikipedia\n    }\n    title\n    flight {\n      details\n      id\n      is_tentative\n      launch_date_local\n      launch_date_unix\n      launch_date_utc\n      launch_site {\n        site_id\n        site_name_long\n        site_name\n      }\n      launch_success\n      launch_year\n      links {\n        article_link\n        flickr_images\n        mission_patch_small\n        mission_patch\n        presskit\n        reddit_campaign\n        reddit_launch\n        reddit_media\n        reddit_recovery\n        video_link\n        wikipedia\n      }\n      mission_id\n      mission_name\n      rocket {\n        fairings {\n          recovered\n          recovery_attempt\n          reused\n          ship\n        }\n        rocket_name\n        rocket_type\n        rocket {\n          active\n          boosters\n          company\n          cost_per_launch\n          country\n          description\n          first_flight\n          id\n          name\n          stages\n          success_rate_pct\n          type\n          wikipedia\n        }\n        second_stage {\n          block\n        }\n      }\n      static_fire_date_unix\n      static_fire_date_utc\n      telemetry {\n        flight_club\n      }\n      tentative_max_precision\n      upcoming\n      ships {\n        abs\n        active\n        attempted_landings\n        class\n        course_deg\n        home_port\n        id\n        image\n        imo\n        missions {\n          flight\n          name\n        }\n        mmsi\n        model\n        name\n        position {\n          latitude\n          longitude\n        }\n        roles\n        speed_kn\n        status\n        successful_landings\n        type\n        url\n        weight_kg\n        weight_lbs\n        year_built\n      }\n    }\n  }\n}\n","variables":"{\n  \"historiesFind\": null,\n  \"historiesLimit\": null,\n  \"historiesOffset\": null,\n  \"historiesOrder\": null,\n  \"historiesSort\": null\n}\n"}},"url":{"raw":"https://api.spacex.land/graphql","host":["https://api.spacex.land/graphql"]}},"response":[]},{"name":"query historiesResult","event":[{"listen":"test","script":{"exec":["pm.test(\"errors is undefined\", function() {","    const response = JSON.parse(responseBody);","    pm.expect(response.errors).to.be.undefined","});"],"type":"text/javascript"}}],"request":{"method":"POST","body":{"mode":"graphql","graphql":{"query":"query Historiesresult(\n  $historiesResultFind: HistoryFind\n  $historiesResultLimit: Int\n  $historiesResultOffset: Int\n  $historiesResultOrder: String\n  $historiesResultSort: String\n) {\n  historiesResult(\n    find: $historiesResultFind\n    limit: $historiesResultLimit\n    offset: $historiesResultOffset\n    order: $historiesResultOrder\n    sort: $historiesResultSort\n  ) {\n    result {\n      totalCount\n    }\n    data {\n      details\n      event_date_unix\n      event_date_utc\n      id\n      links {\n        article\n        reddit\n        wikipedia\n      }\n      title\n      flight {\n        details\n        id\n        is_tentative\n        launch_date_local\n        launch_date_unix\n        launch_date_utc\n        launch_site {\n          site_id\n          site_name_long\n          site_name\n        }\n        launch_success\n        launch_year\n        links {\n          article_link\n          flickr_images\n          mission_patch_small\n          mission_patch\n          presskit\n          reddit_campaign\n          reddit_launch\n          reddit_media\n          reddit_recovery\n          video_link\n          wikipedia\n        }\n        mission_id\n        mission_name\n        rocket {\n          rocket_name\n          rocket_type\n        }\n        static_fire_date_unix\n        static_fire_date_utc\n        telemetry {\n          flight_club\n        }\n        tentative_max_precision\n        upcoming\n        ships {\n          abs\n          active\n          attempted_landings\n          class\n          course_deg\n          home_port\n          id\n          image\n          imo\n          mmsi\n          model\n          name\n          roles\n          speed_kn\n          status\n          successful_landings\n          type\n          url\n          weight_kg\n          weight_lbs\n          year_built\n        }\n      }\n    }\n  }\n}\n","variables":"{\n  \"historiesResultFind\": null,\n  \"historiesResultLimit\": null,\n  \"historiesResultOffset\": null,\n  \"historiesResultOrder\": null,\n  \"historiesResultSort\": null\n}\n"}},"url":{"raw":"https://api.spacex.land/graphql","host":["https://api.spacex.land/graphql"]}},"response":[]},{"name":"query history","event":[{"listen":"test","script":{"exec":["pm.test(\"errors is undefined\", function() {","    const response = JSON.parse(responseBody);","    pm.expect(response.errors).to.be.undefined","});"],"type":"text/javascript"}}],"request":{"method":"POST","body":{"mode":"graphql","graphql":{"query":"query History($historyId: ID!) {\n  history(id: $historyId) {\n    details\n    event_date_unix\n    event_date_utc\n    id\n    links {\n      article\n      reddit\n      wikipedia\n    }\n    title\n    flight {\n      details\n      id\n      is_tentative\n      launch_date_local\n      launch_date_unix\n      launch_date_utc\n      launch_site {\n        site_id\n        site_name_long\n        site_name\n      }\n      launch_success\n      launch_year\n      links {\n        article_link\n        flickr_images\n        mission_patch_small\n        mission_patch\n        presskit\n        reddit_campaign\n        reddit_launch\n        reddit_media\n        reddit_recovery\n        video_link\n        wikipedia\n      }\n      mission_id\n      mission_name\n      rocket {\n        fairings {\n          recovered\n          recovery_attempt\n          reused\n          ship\n        }\n        rocket_name\n        rocket_type\n        rocket {\n          active\n          boosters\n          company\n          cost_per_launch\n          country\n          description\n          first_flight\n          id\n          name\n          stages\n          success_rate_pct\n          type\n          wikipedia\n        }\n        second_stage {\n          block\n        }\n      }\n      static_fire_date_unix\n      static_fire_date_utc\n      telemetry {\n        flight_club\n      }\n      tentative_max_precision\n      upcoming\n      ships {\n        abs\n        active\n        attempted_landings\n        class\n        course_deg\n        home_port\n        id\n        image\n        imo\n        missions {\n          flight\n          name\n        }\n        mmsi\n        model\n        name\n        position {\n          latitude\n          longitude\n        }\n        roles\n        speed_kn\n        status\n        successful_landings\n        type\n        url\n        weight_kg\n        weight_lbs\n        year_built\n      }\n    }\n  }\n}\n","variables":"{\n  \"historyId\": null\n}\n"}},"url":{"raw":"https://api.spacex.land/graphql","host":["https://api.spacex.land/graphql"]}},"response":[]},{"name":"query landpads","event":[{"listen":"test","script":{"exec":["pm.test(\"errors is undefined\", function() {","    const response = JSON.parse(responseBody);","    pm.expect(response.errors).to.be.undefined","});"],"type":"text/javascript"}}],"request":{"method":"POST","body":{"mode":"graphql","graphql":{"query":"query Landpads($landpadsLimit: Int, $landpadsOffset: Int) {\n  landpads(limit: $landpadsLimit, offset: $landpadsOffset) {\n    attempted_landings\n    details\n    full_name\n    id\n    landing_type\n    location {\n      latitude\n      longitude\n      name\n      region\n    }\n    status\n    successful_landings\n    wikipedia\n  }\n}\n","variables":"{\n  \"landpadsLimit\": null,\n  \"landpadsOffset\": null\n}\n"}},"url":{"raw":"https://api.spacex.land/graphql","host":["https://api.spacex.land/graphql"]}},"response":[]},{"name":"query landpad","event":[{"listen":"test","script":{"exec":["pm.test(\"errors is undefined\", function() {","    const response = JSON.parse(responseBody);","    pm.expect(response.errors).to.be.undefined","});"],"type":"text/javascript"}}],"request":{"method":"POST","body":{"mode":"graphql","graphql":{"query":"query Landpad($landpadId: ID!) {\n  landpad(id: $landpadId) {\n    attempted_landings\n    details\n    full_name\n    id\n    landing_type\n    location {\n      latitude\n      longitude\n      name\n      region\n    }\n    status\n    successful_landings\n    wikipedia\n  }\n}\n","variables":"{\n  \"landpadId\": null\n}\n"}},"url":{"raw":"https://api.spacex.land/graphql","host":["https://api.spacex.land/graphql"]}},"response":[]},{"name":"query launches","event":[{"listen":"test","script":{"exec":["pm.test(\"errors is undefined\", function() {","    const response = JSON.parse(responseBody);","    pm.expect(response.errors).to.be.undefined","});"],"type":"text/javascript"}}],"request":{"method":"POST","body":{"mode":"graphql","graphql":{"query":"query Launches(\n  $launchesFind: LaunchFind\n  $launchesLimit: Int\n  $launchesOffset: Int\n  $launchesOrder: String\n  $launchesSort: String\n) {\n  launches(\n    find: $launchesFind\n    limit: $launchesLimit\n    offset: $launchesOffset\n    order: $launchesOrder\n    sort: $launchesSort\n  ) {\n    details\n    id\n    is_tentative\n    launch_date_local\n    launch_date_unix\n    launch_date_utc\n    launch_site {\n      site_id\n      site_name_long\n      site_name\n    }\n    launch_success\n    launch_year\n    links {\n      article_link\n      flickr_images\n      mission_patch_small\n      mission_patch\n      presskit\n      reddit_campaign\n      reddit_launch\n      reddit_media\n      reddit_recovery\n      video_link\n      wikipedia\n    }\n    mission_id\n    mission_name\n    rocket {\n      fairings {\n        recovered\n        recovery_attempt\n        reused\n        ship\n      }\n      first_stage {\n        cores {\n          block\n          flight\n          gridfins\n          land_success\n          landing_intent\n          landing_type\n          landing_vehicle\n          legs\n          reused\n        }\n      }\n      rocket_name\n      rocket_type\n      rocket {\n        active\n        boosters\n        company\n        cost_per_launch\n        country\n        description\n        diameter {\n          feet\n          meters\n        }\n        engines {\n          number\n          type\n          version\n          layout\n          engine_loss_max\n          propellant_1\n          propellant_2\n          thrust_to_weight\n        }\n        first_flight\n        first_stage {\n          burn_time_sec\n          engines\n          fuel_amount_tons\n          reusable\n        }\n        height {\n          feet\n          meters\n        }\n        id\n        landing_legs {\n          number\n          material\n        }\n        mass {\n          kg\n          lb\n        }\n        name\n        payload_weights {\n          id\n          kg\n          lb\n          name\n        }\n        second_stage {\n          burn_time_sec\n          engines\n          fuel_amount_tons\n        }\n        stages\n        success_rate_pct\n        type\n        wikipedia\n      }\n      second_stage {\n        block\n        payloads {\n          customers\n          id\n          manufacturer\n          nationality\n          norad_id\n          orbit\n          payload_mass_kg\n          payload_mass_lbs\n          payload_type\n          reused\n        }\n      }\n    }\n    static_fire_date_unix\n    static_fire_date_utc\n    telemetry {\n      flight_club\n    }\n    tentative_max_precision\n    upcoming\n    ships {\n      abs\n      active\n      attempted_landings\n      class\n      course_deg\n      home_port\n      id\n      image\n      imo\n      missions {\n        flight\n        name\n      }\n      mmsi\n      model\n      name\n      position {\n        latitude\n        longitude\n      }\n      roles\n      speed_kn\n      status\n      successful_landings\n      type\n      url\n      weight_kg\n      weight_lbs\n      year_built\n    }\n  }\n}\n","variables":"{\n  \"launchesFind\": null,\n  \"launchesLimit\": null,\n  \"launchesOffset\": null,\n  \"launchesOrder\": null,\n  \"launchesSort\": null\n}\n"}},"url":{"raw":"https://api.spacex.land/graphql","host":["https://api.spacex.land/graphql"]}},"response":[]},{"name":"query launchesPast","event":[{"listen":"test","script":{"exec":["pm.test(\"errors is undefined\", function() {","    const response = JSON.parse(responseBody);","    pm.expect(response.errors).to.be.undefined","});"],"type":"text/javascript"}}],"request":{"method":"POST","body":{"mode":"graphql","graphql":{"query":"query Launchespast(\n  $launchesPastFind: LaunchFind\n  $launchesPastLimit: Int\n  $launchesPastOffset: Int\n  $launchesPastOrder: String\n  $launchesPastSort: String\n) {\n  launchesPast(\n    find: $launchesPastFind\n    limit: $launchesPastLimit\n    offset: $launchesPastOffset\n    order: $launchesPastOrder\n    sort: $launchesPastSort\n  ) {\n    details\n    id\n    is_tentative\n    launch_date_local\n    launch_date_unix\n    launch_date_utc\n    launch_site {\n      site_id\n      site_name_long\n      site_name\n    }\n    launch_success\n    launch_year\n    links {\n      article_link\n      flickr_images\n      mission_patch_small\n      mission_patch\n      presskit\n      reddit_campaign\n      reddit_launch\n      reddit_media\n      reddit_recovery\n      video_link\n      wikipedia\n    }\n    mission_id\n    mission_name\n    rocket {\n      fairings {\n        recovered\n        recovery_attempt\n        reused\n        ship\n      }\n      first_stage {\n        cores {\n          block\n          flight\n          gridfins\n          land_success\n          landing_intent\n          landing_type\n          landing_vehicle\n          legs\n          reused\n        }\n      }\n      rocket_name\n      rocket_type\n      rocket {\n        active\n        boosters\n        company\n        cost_per_launch\n        country\n        description\n        diameter {\n          feet\n          meters\n        }\n        engines {\n          number\n          type\n          version\n          layout\n          engine_loss_max\n          propellant_1\n          propellant_2\n          thrust_to_weight\n        }\n        first_flight\n        first_stage {\n          burn_time_sec\n          engines\n          fuel_amount_tons\n          reusable\n        }\n        height {\n          feet\n          meters\n        }\n        id\n        landing_legs {\n          number\n          material\n        }\n        mass {\n          kg\n          lb\n        }\n        name\n        payload_weights {\n          id\n          kg\n          lb\n          name\n        }\n        second_stage {\n          burn_time_sec\n          engines\n          fuel_amount_tons\n        }\n        stages\n        success_rate_pct\n        type\n        wikipedia\n      }\n      second_stage {\n        block\n        payloads {\n          customers\n          id\n          manufacturer\n          nationality\n          norad_id\n          orbit\n          payload_mass_kg\n          payload_mass_lbs\n          payload_type\n          reused\n        }\n      }\n    }\n    static_fire_date_unix\n    static_fire_date_utc\n    telemetry {\n      flight_club\n    }\n    tentative_max_precision\n    upcoming\n    ships {\n      abs\n      active\n      attempted_landings\n      class\n      course_deg\n      home_port\n      id\n      image\n      imo\n      missions {\n        flight\n        name\n      }\n      mmsi\n      model\n      name\n      position {\n        latitude\n        longitude\n      }\n      roles\n      speed_kn\n      status\n      successful_landings\n      type\n      url\n      weight_kg\n      weight_lbs\n      year_built\n    }\n  }\n}\n","variables":"{\n  \"launchesPastFind\": null,\n  \"launchesPastLimit\": null,\n  \"launchesPastOffset\": null,\n  \"launchesPastOrder\": null,\n  \"launchesPastSort\": null\n}\n"}},"url":{"raw":"https://api.spacex.land/graphql","host":["https://api.spacex.land/graphql"]}},"response":[]},{"name":"query launchesPastResult","event":[{"listen":"test","script":{"exec":["pm.test(\"errors is undefined\", function() {","    const response = JSON.parse(responseBody);","    pm.expect(response.errors).to.be.undefined","});"],"type":"text/javascript"}}],"request":{"method":"POST","body":{"mode":"graphql","graphql":{"query":"query Launchespastresult(\n  $launchesPastResultFind: LaunchFind\n  $launchesPastResultLimit: Int\n  $launchesPastResultOffset: Int\n  $launchesPastResultOrder: String\n  $launchesPastResultSort: String\n) {\n  launchesPastResult(\n    find: $launchesPastResultFind\n    limit: $launchesPastResultLimit\n    offset: $launchesPastResultOffset\n    order: $launchesPastResultOrder\n    sort: $launchesPastResultSort\n  ) {\n    result {\n      totalCount\n    }\n    data {\n      details\n      id\n      is_tentative\n      launch_date_local\n      launch_date_unix\n      launch_date_utc\n      launch_site {\n        site_id\n        site_name_long\n        site_name\n      }\n      launch_success\n      launch_year\n      links {\n        article_link\n        flickr_images\n        mission_patch_small\n        mission_patch\n        presskit\n        reddit_campaign\n        reddit_launch\n        reddit_media\n        reddit_recovery\n        video_link\n        wikipedia\n      }\n      mission_id\n      mission_name\n      rocket {\n        fairings {\n          recovered\n          recovery_attempt\n          reused\n          ship\n        }\n        rocket_name\n        rocket_type\n        rocket {\n          active\n          boosters\n          company\n          cost_per_launch\n          country\n          description\n          first_flight\n          id\n          name\n          stages\n          success_rate_pct\n          type\n          wikipedia\n        }\n        second_stage {\n          block\n        }\n      }\n      static_fire_date_unix\n      static_fire_date_utc\n      telemetry {\n        flight_club\n      }\n      tentative_max_precision\n      upcoming\n      ships {\n        abs\n        active\n        attempted_landings\n        class\n        course_deg\n        home_port\n        id\n        image\n        imo\n        missions {\n          flight\n          name\n        }\n        mmsi\n        model\n        name\n        position {\n          latitude\n          longitude\n        }\n        roles\n        speed_kn\n        status\n        successful_landings\n        type\n        url\n        weight_kg\n        weight_lbs\n        year_built\n      }\n    }\n  }\n}\n","variables":"{\n  \"launchesPastResultFind\": null,\n  \"launchesPastResultLimit\": null,\n  \"launchesPastResultOffset\": null,\n  \"launchesPastResultOrder\": null,\n  \"launchesPastResultSort\": null\n}\n"}},"url":{"raw":"https://api.spacex.land/graphql","host":["https://api.spacex.land/graphql"]}},"response":[]},{"name":"query launchesUpcoming","event":[{"listen":"test","script":{"exec":["pm.test(\"errors is undefined\", function() {","    const response = JSON.parse(responseBody);","    pm.expect(response.errors).to.be.undefined","});"],"type":"text/javascript"}}],"request":{"method":"POST","body":{"mode":"graphql","graphql":{"query":"query Launchesupcoming(\n  $launchesUpcomingFind: LaunchFind\n  $launchesUpcomingLimit: Int\n  $launchesUpcomingOffset: Int\n  $launchesUpcomingOrder: String\n  $launchesUpcomingSort: String\n) {\n  launchesUpcoming(\n    find: $launchesUpcomingFind\n    limit: $launchesUpcomingLimit\n    offset: $launchesUpcomingOffset\n    order: $launchesUpcomingOrder\n    sort: $launchesUpcomingSort\n  ) {\n    details\n    id\n    is_tentative\n    launch_date_local\n    launch_date_unix\n    launch_date_utc\n    launch_site {\n      site_id\n      site_name_long\n      site_name\n    }\n    launch_success\n    launch_year\n    links {\n      article_link\n      flickr_images\n      mission_patch_small\n      mission_patch\n      presskit\n      reddit_campaign\n      reddit_launch\n      reddit_media\n      reddit_recovery\n      video_link\n      wikipedia\n    }\n    mission_id\n    mission_name\n    rocket {\n      fairings {\n        recovered\n        recovery_attempt\n        reused\n        ship\n      }\n      first_stage {\n        cores {\n          block\n          flight\n          gridfins\n          land_success\n          landing_intent\n          landing_type\n          landing_vehicle\n          legs\n          reused\n        }\n      }\n      rocket_name\n      rocket_type\n      rocket {\n        active\n        boosters\n        company\n        cost_per_launch\n        country\n        description\n        diameter {\n          feet\n          meters\n        }\n        engines {\n          number\n          type\n          version\n          layout\n          engine_loss_max\n          propellant_1\n          propellant_2\n          thrust_to_weight\n        }\n        first_flight\n        first_stage {\n          burn_time_sec\n          engines\n          fuel_amount_tons\n          reusable\n        }\n        height {\n          feet\n          meters\n        }\n        id\n        landing_legs {\n          number\n          material\n        }\n        mass {\n          kg\n          lb\n        }\n        name\n        payload_weights {\n          id\n          kg\n          lb\n          name\n        }\n        second_stage {\n          burn_time_sec\n          engines\n          fuel_amount_tons\n        }\n        stages\n        success_rate_pct\n        type\n        wikipedia\n      }\n      second_stage {\n        block\n        payloads {\n          customers\n          id\n          manufacturer\n          nationality\n          norad_id\n          orbit\n          payload_mass_kg\n          payload_mass_lbs\n          payload_type\n          reused\n        }\n      }\n    }\n    static_fire_date_unix\n    static_fire_date_utc\n    telemetry {\n      flight_club\n    }\n    tentative_max_precision\n    upcoming\n    ships {\n      abs\n      active\n      attempted_landings\n      class\n      course_deg\n      home_port\n      id\n      image\n      imo\n      missions {\n        flight\n        name\n      }\n      mmsi\n      model\n      name\n      position {\n        latitude\n        longitude\n      }\n      roles\n      speed_kn\n      status\n      successful_landings\n      type\n      url\n      weight_kg\n      weight_lbs\n      year_built\n    }\n  }\n}\n","variables":"{\n  \"launchesUpcomingFind\": null,\n  \"launchesUpcomingLimit\": null,\n  \"launchesUpcomingOffset\": null,\n  \"launchesUpcomingOrder\": null,\n  \"launchesUpcomingSort\": null\n}\n"}},"url":{"raw":"https://api.spacex.land/graphql","host":["https://api.spacex.land/graphql"]}},"response":[]},{"name":"query launch","event":[{"listen":"test","script":{"exec":["pm.test(\"errors is undefined\", function() {","    const response = JSON.parse(responseBody);","    pm.expect(response.errors).to.be.undefined","});"],"type":"text/javascript"}}],"request":{"method":"POST","body":{"mode":"graphql","graphql":{"query":"query Launch($launchId: ID!) {\n  launch(id: $launchId) {\n    details\n    id\n    is_tentative\n    launch_date_local\n    launch_date_unix\n    launch_date_utc\n    launch_site {\n      site_id\n      site_name_long\n      site_name\n    }\n    launch_success\n    launch_year\n    links {\n      article_link\n      flickr_images\n      mission_patch_small\n      mission_patch\n      presskit\n      reddit_campaign\n      reddit_launch\n      reddit_media\n      reddit_recovery\n      video_link\n      wikipedia\n    }\n    mission_id\n    mission_name\n    rocket {\n      fairings {\n        recovered\n        recovery_attempt\n        reused\n        ship\n      }\n      first_stage {\n        cores {\n          block\n          flight\n          gridfins\n          land_success\n          landing_intent\n          landing_type\n          landing_vehicle\n          legs\n          reused\n        }\n      }\n      rocket_name\n      rocket_type\n      rocket {\n        active\n        boosters\n        company\n        cost_per_launch\n        country\n        description\n        diameter {\n          feet\n          meters\n        }\n        engines {\n          number\n          type\n          version\n          layout\n          engine_loss_max\n          propellant_1\n          propellant_2\n          thrust_to_weight\n        }\n        first_flight\n        first_stage {\n          burn_time_sec\n          engines\n          fuel_amount_tons\n          reusable\n        }\n        height {\n          feet\n          meters\n        }\n        id\n        landing_legs {\n          number\n          material\n        }\n        mass {\n          kg\n          lb\n        }\n        name\n        payload_weights {\n          id\n          kg\n          lb\n          name\n        }\n        second_stage {\n          burn_time_sec\n          engines\n          fuel_amount_tons\n        }\n        stages\n        success_rate_pct\n        type\n        wikipedia\n      }\n      second_stage {\n        block\n        payloads {\n          customers\n          id\n          manufacturer\n          nationality\n          norad_id\n          orbit\n          payload_mass_kg\n          payload_mass_lbs\n          payload_type\n          reused\n        }\n      }\n    }\n    static_fire_date_unix\n    static_fire_date_utc\n    telemetry {\n      flight_club\n    }\n    tentative_max_precision\n    upcoming\n    ships {\n      abs\n      active\n      attempted_landings\n      class\n      course_deg\n      home_port\n      id\n      image\n      imo\n      missions {\n        flight\n        name\n      }\n      mmsi\n      model\n      name\n      position {\n        latitude\n        longitude\n      }\n      roles\n      speed_kn\n      status\n      successful_landings\n      type\n      url\n      weight_kg\n      weight_lbs\n      year_built\n    }\n  }\n}\n","variables":"{\n  \"launchId\": null\n}\n"}},"url":{"raw":"https://api.spacex.land/graphql","host":["https://api.spacex.land/graphql"]}},"response":[]},{"name":"query launchLatest","event":[{"listen":"test","script":{"exec":["pm.test(\"errors is undefined\", function() {","    const response = JSON.parse(responseBody);","    pm.expect(response.errors).to.be.undefined","});"],"type":"text/javascript"}}],"request":{"method":"POST","body":{"mode":"graphql","graphql":{"query":"query Launchlatest($launchLatestOffset: Int) {\n  launchLatest(offset: $launchLatestOffset) {\n    details\n    id\n    is_tentative\n    launch_date_local\n    launch_date_unix\n    launch_date_utc\n    launch_site {\n      site_id\n      site_name_long\n      site_name\n    }\n    launch_success\n    launch_year\n    links {\n      article_link\n      flickr_images\n      mission_patch_small\n      mission_patch\n      presskit\n      reddit_campaign\n      reddit_launch\n      reddit_media\n      reddit_recovery\n      video_link\n      wikipedia\n    }\n    mission_id\n    mission_name\n    rocket {\n      fairings {\n        recovered\n        recovery_attempt\n        reused\n        ship\n      }\n      first_stage {\n        cores {\n          block\n          flight\n          gridfins\n          land_success\n          landing_intent\n          landing_type\n          landing_vehicle\n          legs\n          reused\n        }\n      }\n      rocket_name\n      rocket_type\n      rocket {\n        active\n        boosters\n        company\n        cost_per_launch\n        country\n        description\n        diameter {\n          feet\n          meters\n        }\n        engines {\n          number\n          type\n          version\n          layout\n          engine_loss_max\n          propellant_1\n          propellant_2\n          thrust_to_weight\n        }\n        first_flight\n        first_stage {\n          burn_time_sec\n          engines\n          fuel_amount_tons\n          reusable\n        }\n        height {\n          feet\n          meters\n        }\n        id\n        landing_legs {\n          number\n          material\n        }\n        mass {\n          kg\n          lb\n        }\n        name\n        payload_weights {\n          id\n          kg\n          lb\n          name\n        }\n        second_stage {\n          burn_time_sec\n          engines\n          fuel_amount_tons\n        }\n        stages\n        success_rate_pct\n        type\n        wikipedia\n      }\n      second_stage {\n        block\n        payloads {\n          customers\n          id\n          manufacturer\n          nationality\n          norad_id\n          orbit\n          payload_mass_kg\n          payload_mass_lbs\n          payload_type\n          reused\n        }\n      }\n    }\n    static_fire_date_unix\n    static_fire_date_utc\n    telemetry {\n      flight_club\n    }\n    tentative_max_precision\n    upcoming\n    ships {\n      abs\n      active\n      attempted_landings\n      class\n      course_deg\n      home_port\n      id\n      image\n      imo\n      missions {\n        flight\n        name\n      }\n      mmsi\n      model\n      name\n      position {\n        latitude\n        longitude\n      }\n      roles\n      speed_kn\n      status\n      successful_landings\n      type\n      url\n      weight_kg\n      weight_lbs\n      year_built\n    }\n  }\n}\n","variables":"{\n  \"launchLatestOffset\": null\n}\n"}},"url":{"raw":"https://api.spacex.land/graphql","host":["https://api.spacex.land/graphql"]}},"response":[]},{"name":"query launchNext","event":[{"listen":"test","script":{"exec":["pm.test(\"errors is undefined\", function() {","    const response = JSON.parse(responseBody);","    pm.expect(response.errors).to.be.undefined","});"],"type":"text/javascript"}}],"request":{"method":"POST","body":{"mode":"graphql","graphql":{"query":"query Launchnext($launchNextOffset: Int) {\n  launchNext(offset: $launchNextOffset) {\n    details\n    id\n    is_tentative\n    launch_date_local\n    launch_date_unix\n    launch_date_utc\n    launch_site {\n      site_id\n      site_name_long\n      site_name\n    }\n    launch_success\n    launch_year\n    links {\n      article_link\n      flickr_images\n      mission_patch_small\n      mission_patch\n      presskit\n      reddit_campaign\n      reddit_launch\n      reddit_media\n      reddit_recovery\n      video_link\n      wikipedia\n    }\n    mission_id\n    mission_name\n    rocket {\n      fairings {\n        recovered\n        recovery_attempt\n        reused\n        ship\n      }\n      first_stage {\n        cores {\n          block\n          flight\n          gridfins\n          land_success\n          landing_intent\n          landing_type\n          landing_vehicle\n          legs\n          reused\n        }\n      }\n      rocket_name\n      rocket_type\n      rocket {\n        active\n        boosters\n        company\n        cost_per_launch\n        country\n        description\n        diameter {\n          feet\n          meters\n        }\n        engines {\n          number\n          type\n          version\n          layout\n          engine_loss_max\n          propellant_1\n          propellant_2\n          thrust_to_weight\n        }\n        first_flight\n        first_stage {\n          burn_time_sec\n          engines\n          fuel_amount_tons\n          reusable\n        }\n        height {\n          feet\n          meters\n        }\n        id\n        landing_legs {\n          number\n          material\n        }\n        mass {\n          kg\n          lb\n        }\n        name\n        payload_weights {\n          id\n          kg\n          lb\n          name\n        }\n        second_stage {\n          burn_time_sec\n          engines\n          fuel_amount_tons\n        }\n        stages\n        success_rate_pct\n        type\n        wikipedia\n      }\n      second_stage {\n        block\n        payloads {\n          customers\n          id\n          manufacturer\n          nationality\n          norad_id\n          orbit\n          payload_mass_kg\n          payload_mass_lbs\n          payload_type\n          reused\n        }\n      }\n    }\n    static_fire_date_unix\n    static_fire_date_utc\n    telemetry {\n      flight_club\n    }\n    tentative_max_precision\n    upcoming\n    ships {\n      abs\n      active\n      attempted_landings\n      class\n      course_deg\n      home_port\n      id\n      image\n      imo\n      missions {\n        flight\n        name\n      }\n      mmsi\n      model\n      name\n      position {\n        latitude\n        longitude\n      }\n      roles\n      speed_kn\n      status\n      successful_landings\n      type\n      url\n      weight_kg\n      weight_lbs\n      year_built\n    }\n  }\n}\n","variables":"{\n  \"launchNextOffset\": null\n}\n"}},"url":{"raw":"https://api.spacex.land/graphql","host":["https://api.spacex.land/graphql"]}},"response":[]},{"name":"query launchpads","event":[{"listen":"test","script":{"exec":["pm.test(\"errors is undefined\", function() {","    const response = JSON.parse(responseBody);","    pm.expect(response.errors).to.be.undefined","});"],"type":"text/javascript"}}],"request":{"method":"POST","body":{"mode":"graphql","graphql":{"query":"query Launchpads($launchpadsLimit: Int, $launchpadsOffset: Int) {\n  launchpads(limit: $launchpadsLimit, offset: $launchpadsOffset) {\n    attempted_launches\n    details\n    id\n    location {\n      latitude\n      longitude\n      name\n      region\n    }\n    name\n    status\n    successful_launches\n    vehicles_launched {\n      active\n      boosters\n      company\n      cost_per_launch\n      country\n      description\n      diameter {\n        feet\n        meters\n      }\n      engines {\n        number\n        type\n        version\n        layout\n        engine_loss_max\n        propellant_1\n        propellant_2\n        thrust_sea_level {\n          kN\n          lbf\n        }\n        thrust_vacuum {\n          kN\n          lbf\n        }\n        thrust_to_weight\n      }\n      first_flight\n      first_stage {\n        burn_time_sec\n        engines\n        fuel_amount_tons\n        reusable\n        thrust_sea_level {\n          kN\n          lbf\n        }\n        thrust_vacuum {\n          kN\n          lbf\n        }\n      }\n      height {\n        feet\n        meters\n      }\n      id\n      landing_legs {\n        number\n        material\n      }\n      mass {\n        kg\n        lb\n      }\n      name\n      payload_weights {\n        id\n        kg\n        lb\n        name\n      }\n      second_stage {\n        burn_time_sec\n        engines\n        fuel_amount_tons\n        payloads {\n          option_1\n        }\n        thrust {\n          kN\n          lbf\n        }\n      }\n      stages\n      success_rate_pct\n      type\n      wikipedia\n    }\n    wikipedia\n  }\n}\n","variables":"{\n  \"launchpadsLimit\": null,\n  \"launchpadsOffset\": null\n}\n"}},"url":{"raw":"https://api.spacex.land/graphql","host":["https://api.spacex.land/graphql"]}},"response":[]},{"name":"query launchpad","event":[{"listen":"test","script":{"exec":["pm.test(\"errors is undefined\", function() {","    const response = JSON.parse(responseBody);","    pm.expect(response.errors).to.be.undefined","});"],"type":"text/javascript"}}],"request":{"method":"POST","body":{"mode":"graphql","graphql":{"query":"query Launchpad($launchpadId: ID!) {\n  launchpad(id: $launchpadId) {\n    attempted_launches\n    details\n    id\n    location {\n      latitude\n      longitude\n      name\n      region\n    }\n    name\n    status\n    successful_launches\n    vehicles_launched {\n      active\n      boosters\n      company\n      cost_per_launch\n      country\n      description\n      diameter {\n        feet\n        meters\n      }\n      engines {\n        number\n        type\n        version\n        layout\n        engine_loss_max\n        propellant_1\n        propellant_2\n        thrust_sea_level {\n          kN\n          lbf\n        }\n        thrust_vacuum {\n          kN\n          lbf\n        }\n        thrust_to_weight\n      }\n      first_flight\n      first_stage {\n        burn_time_sec\n        engines\n        fuel_amount_tons\n        reusable\n        thrust_sea_level {\n          kN\n          lbf\n        }\n        thrust_vacuum {\n          kN\n          lbf\n        }\n      }\n      height {\n        feet\n        meters\n      }\n      id\n      landing_legs {\n        number\n        material\n      }\n      mass {\n        kg\n        lb\n      }\n      name\n      payload_weights {\n        id\n        kg\n        lb\n        name\n      }\n      second_stage {\n        burn_time_sec\n        engines\n        fuel_amount_tons\n        payloads {\n          option_1\n        }\n        thrust {\n          kN\n          lbf\n        }\n      }\n      stages\n      success_rate_pct\n      type\n      wikipedia\n    }\n    wikipedia\n  }\n}\n","variables":"{\n  \"launchpadId\": null\n}\n"}},"url":{"raw":"https://api.spacex.land/graphql","host":["https://api.spacex.land/graphql"]}},"response":[]},{"name":"query missions","event":[{"listen":"test","script":{"exec":["pm.test(\"errors is undefined\", function() {","    const response = JSON.parse(responseBody);","    pm.expect(response.errors).to.be.undefined","});"],"type":"text/javascript"}}],"request":{"method":"POST","body":{"mode":"graphql","graphql":{"query":"query Missions(\n  $missionsFind: MissionsFind\n  $missionsLimit: Int\n  $missionsOffset: Int\n) {\n  missions(\n    find: $missionsFind\n    limit: $missionsLimit\n    offset: $missionsOffset\n  ) {\n    description\n    id\n    manufacturers\n    name\n    twitter\n    website\n    wikipedia\n    payloads {\n      customers\n      id\n      manufacturer\n      nationality\n      norad_id\n      orbit_params {\n        apoapsis_km\n        arg_of_pericenter\n        eccentricity\n        epoch\n        inclination_deg\n        lifespan_years\n        longitude\n        mean_anomaly\n        mean_motion\n        periapsis_km\n        period_min\n        raan\n        reference_system\n        regime\n        semi_major_axis_km\n      }\n      orbit\n      payload_mass_kg\n      payload_mass_lbs\n      payload_type\n      reused\n    }\n  }\n}\n","variables":"{\n  \"missionsFind\": null,\n  \"missionsLimit\": null,\n  \"missionsOffset\": null\n}\n"}},"url":{"raw":"https://api.spacex.land/graphql","host":["https://api.spacex.land/graphql"]}},"response":[]},{"name":"query missionsResult","event":[{"listen":"test","script":{"exec":["pm.test(\"errors is undefined\", function() {","    const response = JSON.parse(responseBody);","    pm.expect(response.errors).to.be.undefined","});"],"type":"text/javascript"}}],"request":{"method":"POST","body":{"mode":"graphql","graphql":{"query":"query Missionsresult(\n  $missionsResultFind: MissionsFind\n  $missionsResultLimit: Int\n  $missionsResultOffset: Int\n) {\n  missionsResult(\n    find: $missionsResultFind\n    limit: $missionsResultLimit\n    offset: $missionsResultOffset\n  ) {\n    result {\n      totalCount\n    }\n    data {\n      description\n      id\n      manufacturers\n      name\n      twitter\n      website\n      wikipedia\n      payloads {\n        customers\n        id\n        manufacturer\n        nationality\n        norad_id\n        orbit_params {\n          apoapsis_km\n          arg_of_pericenter\n          eccentricity\n          epoch\n          inclination_deg\n          lifespan_years\n          longitude\n          mean_anomaly\n          mean_motion\n          periapsis_km\n          period_min\n          raan\n          reference_system\n          regime\n          semi_major_axis_km\n        }\n        orbit\n        payload_mass_kg\n        payload_mass_lbs\n        payload_type\n        reused\n      }\n    }\n  }\n}\n","variables":"{\n  \"missionsResultFind\": null,\n  \"missionsResultLimit\": null,\n  \"missionsResultOffset\": null\n}\n"}},"url":{"raw":"https://api.spacex.land/graphql","host":["https://api.spacex.land/graphql"]}},"response":[]},{"name":"query mission","event":[{"listen":"test","script":{"exec":["pm.test(\"errors is undefined\", function() {","    const response = JSON.parse(responseBody);","    pm.expect(response.errors).to.be.undefined","});"],"type":"text/javascript"}}],"request":{"method":"POST","body":{"mode":"graphql","graphql":{"query":"query Mission($missionId: ID!) {\n  mission(id: $missionId) {\n    description\n    id\n    manufacturers\n    name\n    twitter\n    website\n    wikipedia\n    payloads {\n      customers\n      id\n      manufacturer\n      nationality\n      norad_id\n      orbit_params {\n        apoapsis_km\n        arg_of_pericenter\n        eccentricity\n        epoch\n        inclination_deg\n        lifespan_years\n        longitude\n        mean_anomaly\n        mean_motion\n        periapsis_km\n        period_min\n        raan\n        reference_system\n        regime\n        semi_major_axis_km\n      }\n      orbit\n      payload_mass_kg\n      payload_mass_lbs\n      payload_type\n      reused\n    }\n  }\n}\n","variables":"{\n  \"missionId\": null\n}\n"}},"url":{"raw":"https://api.spacex.land/graphql","host":["https://api.spacex.land/graphql"]}},"response":[]},{"name":"query payloads","event":[{"listen":"test","script":{"exec":["pm.test(\"errors is undefined\", function() {","    const response = JSON.parse(responseBody);","    pm.expect(response.errors).to.be.undefined","});"],"type":"text/javascript"}}],"request":{"method":"POST","body":{"mode":"graphql","graphql":{"query":"query Payloads(\n  $payloadsFind: PayloadsFind\n  $payloadsLimit: Int\n  $payloadsOffset: Int\n  $payloadsOrder: String\n  $payloadsSort: String\n) {\n  payloads(\n    find: $payloadsFind\n    limit: $payloadsLimit\n    offset: $payloadsOffset\n    order: $payloadsOrder\n    sort: $payloadsSort\n  ) {\n    customers\n    id\n    manufacturer\n    nationality\n    norad_id\n    orbit_params {\n      apoapsis_km\n      arg_of_pericenter\n      eccentricity\n      epoch\n      inclination_deg\n      lifespan_years\n      longitude\n      mean_anomaly\n      mean_motion\n      periapsis_km\n      period_min\n      raan\n      reference_system\n      regime\n      semi_major_axis_km\n    }\n    orbit\n    payload_mass_kg\n    payload_mass_lbs\n    payload_type\n    reused\n  }\n}\n","variables":"{\n  \"payloadsFind\": null,\n  \"payloadsLimit\": null,\n  \"payloadsOffset\": null,\n  \"payloadsOrder\": null,\n  \"payloadsSort\": null\n}\n"}},"url":{"raw":"https://api.spacex.land/graphql","host":["https://api.spacex.land/graphql"]}},"response":[]},{"name":"query payload","event":[{"listen":"test","script":{"exec":["pm.test(\"errors is undefined\", function() {","    const response = JSON.parse(responseBody);","    pm.expect(response.errors).to.be.undefined","});"],"type":"text/javascript"}}],"request":{"method":"POST","body":{"mode":"graphql","graphql":{"query":"query Payload($payloadId: ID!) {\n  payload(id: $payloadId) {\n    customers\n    id\n    manufacturer\n    nationality\n    norad_id\n    orbit_params {\n      apoapsis_km\n      arg_of_pericenter\n      eccentricity\n      epoch\n      inclination_deg\n      lifespan_years\n      longitude\n      mean_anomaly\n      mean_motion\n      periapsis_km\n      period_min\n      raan\n      reference_system\n      regime\n      semi_major_axis_km\n    }\n    orbit\n    payload_mass_kg\n    payload_mass_lbs\n    payload_type\n    reused\n  }\n}\n","variables":"{\n  \"payloadId\": null\n}\n"}},"url":{"raw":"https://api.spacex.land/graphql","host":["https://api.spacex.land/graphql"]}},"response":[]},{"name":"query roadster","event":[{"listen":"test","script":{"exec":["pm.test(\"errors is undefined\", function() {","    const response = JSON.parse(responseBody);","    pm.expect(response.errors).to.be.undefined","});"],"type":"text/javascript"}}],"request":{"method":"POST","body":{"mode":"graphql","graphql":{"query":"query Roadster {\n  roadster {\n    apoapsis_au\n    details\n    earth_distance_km\n    earth_distance_mi\n    eccentricity\n    epoch_jd\n    inclination\n    launch_date_unix\n    launch_date_utc\n    launch_mass_kg\n    launch_mass_lbs\n    longitude\n    mars_distance_km\n    mars_distance_mi\n    name\n    norad_id\n    orbit_type\n    periapsis_arg\n    periapsis_au\n    period_days\n    semi_major_axis_au\n    speed_kph\n    speed_mph\n    wikipedia\n  }\n}\n","variables":"{}\n"}},"url":{"raw":"https://api.spacex.land/graphql","host":["https://api.spacex.land/graphql"]}},"response":[]},{"name":"query rockets","event":[{"listen":"test","script":{"exec":["pm.test(\"errors is undefined\", function() {","    const response = JSON.parse(responseBody);","    pm.expect(response.errors).to.be.undefined","});"],"type":"text/javascript"}}],"request":{"method":"POST","body":{"mode":"graphql","graphql":{"query":"query Rockets($rocketsLimit: Int, $rocketsOffset: Int) {\n  rockets(limit: $rocketsLimit, offset: $rocketsOffset) {\n    active\n    boosters\n    company\n    cost_per_launch\n    country\n    description\n    diameter {\n      feet\n      meters\n    }\n    engines {\n      number\n      type\n      version\n      layout\n      engine_loss_max\n      propellant_1\n      propellant_2\n      thrust_sea_level {\n        kN\n        lbf\n      }\n      thrust_vacuum {\n        kN\n        lbf\n      }\n      thrust_to_weight\n    }\n    first_flight\n    first_stage {\n      burn_time_sec\n      engines\n      fuel_amount_tons\n      reusable\n      thrust_sea_level {\n        kN\n        lbf\n      }\n      thrust_vacuum {\n        kN\n        lbf\n      }\n    }\n    height {\n      feet\n      meters\n    }\n    id\n    landing_legs {\n      number\n      material\n    }\n    mass {\n      kg\n      lb\n    }\n    name\n    payload_weights {\n      id\n      kg\n      lb\n      name\n    }\n    second_stage {\n      burn_time_sec\n      engines\n      fuel_amount_tons\n      payloads {\n        option_1\n      }\n      thrust {\n        kN\n        lbf\n      }\n    }\n    stages\n    success_rate_pct\n    type\n    wikipedia\n  }\n}\n","variables":"{\n  \"rocketsLimit\": null,\n  \"rocketsOffset\": null\n}\n"}},"url":{"raw":"https://api.spacex.land/graphql","host":["https://api.spacex.land/graphql"]}},"response":[]},{"name":"query rocketsResult","event":[{"listen":"test","script":{"exec":["pm.test(\"errors is undefined\", function() {","    const response = JSON.parse(responseBody);","    pm.expect(response.errors).to.be.undefined","});"],"type":"text/javascript"}}],"request":{"method":"POST","body":{"mode":"graphql","graphql":{"query":"query Rocketsresult($rocketsResultLimit: Int, $rocketsResultOffset: Int) {\n  rocketsResult(limit: $rocketsResultLimit, offset: $rocketsResultOffset) {\n    result {\n      totalCount\n    }\n    data {\n      active\n      boosters\n      company\n      cost_per_launch\n      country\n      description\n      diameter {\n        feet\n        meters\n      }\n      engines {\n        number\n        type\n        version\n        layout\n        engine_loss_max\n        propellant_1\n        propellant_2\n        thrust_sea_level {\n          kN\n          lbf\n        }\n        thrust_vacuum {\n          kN\n          lbf\n        }\n        thrust_to_weight\n      }\n      first_flight\n      first_stage {\n        burn_time_sec\n        engines\n        fuel_amount_tons\n        reusable\n        thrust_sea_level {\n          kN\n          lbf\n        }\n        thrust_vacuum {\n          kN\n          lbf\n        }\n      }\n      height {\n        feet\n        meters\n      }\n      id\n      landing_legs {\n        number\n        material\n      }\n      mass {\n        kg\n        lb\n      }\n      name\n      payload_weights {\n        id\n        kg\n        lb\n        name\n      }\n      second_stage {\n        burn_time_sec\n        engines\n        fuel_amount_tons\n        payloads {\n          option_1\n        }\n        thrust {\n          kN\n          lbf\n        }\n      }\n      stages\n      success_rate_pct\n      type\n      wikipedia\n    }\n  }\n}\n","variables":"{\n  \"rocketsResultLimit\": null,\n  \"rocketsResultOffset\": null\n}\n"}},"url":{"raw":"https://api.spacex.land/graphql","host":["https://api.spacex.land/graphql"]}},"response":[]},{"name":"query rocket","event":[{"listen":"test","script":{"exec":["pm.test(\"errors is undefined\", function() {","    const response = JSON.parse(responseBody);","    pm.expect(response.errors).to.be.undefined","});"],"type":"text/javascript"}}],"request":{"method":"POST","body":{"mode":"graphql","graphql":{"query":"query Rocket($rocketId: ID!) {\n  rocket(id: $rocketId) {\n    active\n    boosters\n    company\n    cost_per_launch\n    country\n    description\n    diameter {\n      feet\n      meters\n    }\n    engines {\n      number\n      type\n      version\n      layout\n      engine_loss_max\n      propellant_1\n      propellant_2\n      thrust_sea_level {\n        kN\n        lbf\n      }\n      thrust_vacuum {\n        kN\n        lbf\n      }\n      thrust_to_weight\n    }\n    first_flight\n    first_stage {\n      burn_time_sec\n      engines\n      fuel_amount_tons\n      reusable\n      thrust_sea_level {\n        kN\n        lbf\n      }\n      thrust_vacuum {\n        kN\n        lbf\n      }\n    }\n    height {\n      feet\n      meters\n    }\n    id\n    landing_legs {\n      number\n      material\n    }\n    mass {\n      kg\n      lb\n    }\n    name\n    payload_weights {\n      id\n      kg\n      lb\n      name\n    }\n    second_stage {\n      burn_time_sec\n      engines\n      fuel_amount_tons\n      payloads {\n        option_1\n      }\n      thrust {\n        kN\n        lbf\n      }\n    }\n    stages\n    success_rate_pct\n    type\n    wikipedia\n  }\n}\n","variables":"{\n  \"rocketId\": null\n}\n"}},"url":{"raw":"https://api.spacex.land/graphql","host":["https://api.spacex.land/graphql"]}},"response":[]},{"name":"query ships","event":[{"listen":"test","script":{"exec":["pm.test(\"errors is undefined\", function() {","    const response = JSON.parse(responseBody);","    pm.expect(response.errors).to.be.undefined","});"],"type":"text/javascript"}}],"request":{"method":"POST","body":{"mode":"graphql","graphql":{"query":"query Ships(\n  $shipsFind: ShipsFind\n  $shipsLimit: Int\n  $shipsOffset: Int\n  $shipsOrder: String\n  $shipsSort: String\n) {\n  ships(\n    find: $shipsFind\n    limit: $shipsLimit\n    offset: $shipsOffset\n    order: $shipsOrder\n    sort: $shipsSort\n  ) {\n    abs\n    active\n    attempted_landings\n    class\n    course_deg\n    home_port\n    id\n    image\n    imo\n    missions {\n      flight\n      name\n    }\n    mmsi\n    model\n    name\n    position {\n      latitude\n      longitude\n    }\n    roles\n    speed_kn\n    status\n    successful_landings\n    type\n    url\n    weight_kg\n    weight_lbs\n    year_built\n  }\n}\n","variables":"{\n  \"shipsFind\": null,\n  \"shipsLimit\": null,\n  \"shipsOffset\": null,\n  \"shipsOrder\": null,\n  \"shipsSort\": null\n}\n"}},"url":{"raw":"https://api.spacex.land/graphql","host":["https://api.spacex.land/graphql"]}},"response":[]},{"name":"query shipsResult","event":[{"listen":"test","script":{"exec":["pm.test(\"errors is undefined\", function() {","    const response = JSON.parse(responseBody);","    pm.expect(response.errors).to.be.undefined","});"],"type":"text/javascript"}}],"request":{"method":"POST","body":{"mode":"graphql","graphql":{"query":"query Shipsresult(\n  $shipsResultFind: ShipsFind\n  $shipsResultLimit: Int\n  $shipsResultOffset: Int\n  $shipsResultOrder: String\n  $shipsResultSort: String\n) {\n  shipsResult(\n    find: $shipsResultFind\n    limit: $shipsResultLimit\n    offset: $shipsResultOffset\n    order: $shipsResultOrder\n    sort: $shipsResultSort\n  ) {\n    result {\n      totalCount\n    }\n    data {\n      abs\n      active\n      attempted_landings\n      class\n      course_deg\n      home_port\n      id\n      image\n      imo\n      missions {\n        flight\n        name\n      }\n      mmsi\n      model\n      name\n      position {\n        latitude\n        longitude\n      }\n      roles\n      speed_kn\n      status\n      successful_landings\n      type\n      url\n      weight_kg\n      weight_lbs\n      year_built\n    }\n  }\n}\n","variables":"{\n  \"shipsResultFind\": null,\n  \"shipsResultLimit\": null,\n  \"shipsResultOffset\": null,\n  \"shipsResultOrder\": null,\n  \"shipsResultSort\": null\n}\n"}},"url":{"raw":"https://api.spacex.land/graphql","host":["https://api.spacex.land/graphql"]}},"response":[]},{"name":"query ship","event":[{"listen":"test","script":{"exec":["pm.test(\"errors is undefined\", function() {","    const response = JSON.parse(responseBody);","    pm.expect(response.errors).to.be.undefined","});"],"type":"text/javascript"}}],"request":{"method":"POST","body":{"mode":"graphql","graphql":{"query":"query Ship($shipId: ID!) {\n  ship(id: $shipId) {\n    abs\n    active\n    attempted_landings\n    class\n    course_deg\n    home_port\n    id\n    image\n    imo\n    missions {\n      flight\n      name\n    }\n    mmsi\n    model\n    name\n    position {\n      latitude\n      longitude\n    }\n    roles\n    speed_kn\n    status\n    successful_landings\n    type\n    url\n    weight_kg\n    weight_lbs\n    year_built\n  }\n}\n","variables":"{\n  \"shipId\": null\n}\n"}},"url":{"raw":"https://api.spacex.land/graphql","host":["https://api.spacex.land/graphql"]}},"response":[]}]},{"name":"mutation","item":[{"name":"mutation delete_users","event":[{"listen":"test","script":{"exec":["pm.test(\"errors is undefined\", function() {","    const response = JSON.parse(responseBody);","    pm.expect(response.errors).to.be.undefined","});"],"type":"text/javascript"}}],"request":{"method":"POST","body":{"mode":"graphql","graphql":{"query":"mutation Delete_users($delete_usersWhere: users_bool_exp!) {\n  delete_users(where: $delete_usersWhere) {\n    affected_rows\n    returning {\n      id\n      name\n      rocket\n      timestamp\n      twitter\n    }\n  }\n}\n","variables":"{\n  \"delete_usersWhere\": null\n}\n"}},"url":{"raw":"https://api.spacex.land/graphql","host":["https://api.spacex.land/graphql"]}},"response":[]},{"name":"mutation insert_users","event":[{"listen":"test","script":{"exec":["pm.test(\"errors is undefined\", function() {","    const response = JSON.parse(responseBody);","    pm.expect(response.errors).to.be.undefined","});"],"type":"text/javascript"}}],"request":{"method":"POST","body":{"mode":"graphql","graphql":{"query":"mutation Insert_users(\n  $insert_usersObjects: [users_insert_input!]!\n  $insert_usersOn_conflict: users_on_conflict\n) {\n  insert_users(\n    objects: $insert_usersObjects\n    on_conflict: $insert_usersOn_conflict\n  ) {\n    affected_rows\n    returning {\n      id\n      name\n      rocket\n      timestamp\n      twitter\n    }\n  }\n}\n","variables":"{\n  \"insert_usersObjects\": null,\n  \"insert_usersOn_conflict\": null\n}\n"}},"url":{"raw":"https://api.spacex.land/graphql","host":["https://api.spacex.land/graphql"]}},"response":[]},{"name":"mutation update_users","event":[{"listen":"test","script":{"exec":["pm.test(\"errors is undefined\", function() {","    const response = JSON.parse(responseBody);","    pm.expect(response.errors).to.be.undefined","});"],"type":"text/javascript"}}],"request":{"method":"POST","body":{"mode":"graphql","graphql":{"query":"mutation Update_users(\n  $update_users_set: users_set_input\n  $update_usersWhere: users_bool_exp!\n) {\n  update_users(_set: $update_users_set, where: $update_usersWhere) {\n    affected_rows\n    returning {\n      id\n      name\n      rocket\n      timestamp\n      twitter\n    }\n  }\n}\n","variables":"{\n  \"update_users_set\": null,\n  \"update_usersWhere\": null\n}\n"}},"url":{"raw":"https://api.spacex.land/graphql","host":["https://api.spacex.land/graphql"]}},"response":[]}]}]}